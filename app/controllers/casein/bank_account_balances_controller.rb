# Scaffolding generated by Casein v5.1.1.5

module Casein
  class BankAccountBalancesController < Casein::CaseinController
    include TargetModelFetching
    target_model :bank_account_balance

    before_filter :needs_admin
  
    def index
      @based_on = BankAccountBalance.first&.based_on
      @estimated_on = BankAccountBalance.first&.estimated_on
      @last_updated_at = BankAccountBalance.first&.updated_at
      get_bank_account_balances
    end
  
    def update_all
      @based_on = Date.parse(params[:based_on]) rescue Date.today
      @estimated_on = Date.parse(params[:estimated_on]) rescue nil
      if bank_account_balances_params = params[:bank_account_balances]
        BankAccountBalance.calculate_all(bank_account_balances_params, @estimated_on, @based_on)
      end
      @last_updated_at = BankAccountBalance.first&.updated_at
      get_bank_account_balances
    end

    def pdf
      bank_acount_balances = BankAccountBalance.all
      first_record = bank_acount_balances.first
      pdf = BankAccountBalancePDF.new(bank_acount_balances)
      pdf_filename = "bank-account-balance-" + first_record.created_at&.strftime("%y%m%d") + "-" + first_record.estimated_on&.strftime("%y%m%d") + '.pdf'
      send_data pdf.render,
        filename:  pdf_filename,
        type:      "application/pdf",
        disposition:  "attachment"
    end

    private

    def get_bank_account_balances
      my_accounts = MyAccount.all.includes(:bank_account_balance)
      case params[:c]
      when 'org_name'
        my_accounts = my_accounts.org_name_order(params[:d] == 'down' ? 'desc' : 'asc')
      when 'bank_long_name'
        my_accounts = my_accounts.bank_name_order(params[:d] == 'down' ? 'desc' : 'asc')
      else
        my_accounts = my_accounts.org_name_order('asc').bank_name_order('asc')
      end

      @bank_account_balances = my_accounts.map{|my_account|
        my_account.bank_account_balance || BankAccountBalance.new(my_account: my_account, estimated_on: @estimated_on)
      }
    end
  end
end
